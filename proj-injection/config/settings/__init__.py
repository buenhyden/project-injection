"""Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import logging
import os
from pathlib import Path

from django.core.exceptions import ImproperlyConfigured
from dotenv import load_dotenv

from .applications import INSTALLED_APPS as INSTALLED_APPS
from .applications import MIDDLEWARE as MIDDLEWARE
from .applications import ROOT_URLCONF as ROOT_URLCONF
from .applications import TEMPLATES as TEMPLATES
from .applications import WSGI_APPLICATION as WSGI_APPLICATION
from .authentication import AUTH_PASSWORD_VALIDATORS as AUTH_PASSWORD_VALIDATORS
from .authentication import LOGIN_URL as LOGIN_URL
from .authentication import LOGOUT_URL as LOGOUT_URL
from .celery import CELERY_ACCEPT_CONTENT as CELERY_ACCEPT_CONTENT
from .celery import CELERY_BROKER_URL as CELERY_BROKER_URL
from .celery import CELERY_RESULT_BACKEND as CELERY_RESULT_BACKEND
from .celery import CELERY_RESULT_SERIALIZER as CELERY_RESULT_SERIALIZER
from .celery import CELERY_TASK_SERIALIZER as CELERY_TASK_SERIALIZER
from .databases import AUTH_USER_MODEL as AUTH_USER_MODEL
from .databases import DATABASES as DATABASES
from .databases import DEFAULT_AUTO_FIELD as DEFAULT_AUTO_FIELD
from .i18n import LANGUAGE_CODE as LANGUAGE_CODE
from .i18n import TIME_ZONE as TIME_ZONE
from .i18n import USE_I18N as USE_I18N
from .i18n import USE_TZ as USE_TZ
from .rest_framework import REST_FRAMEWORK as REST_FRAMEWORK
from .set_jwt import set_jwt
from .set_logging import set_logging
from .static import STATIC_URL as STATIC_URL
from .swagger import REDOC_SETTINGS as REDOC_SETTINGS
from .swagger import SWAGGER_SETTINGS as SWAGGER_SETTINGS

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
LOGGING = set_logging(BASE_DIR)

logger = logging.getLogger("system_error")

load_dotenv()
# SECURITY WARNING: don't run with debug turned on in production!
SECRET_KEY = os.getenv("SECRET_KEY")
SIMPLE_JWT = set_jwt(SECRET_KEY)
os.environ["MODE"] = "RELEASE"
if os.environ["MODE"] == "DEV":
    DEBUG = True
    ALLOWED_HOSTS = ["*"]
    CSRF_TRUSTED_ORIGINS = ["http://127.0.0.1", "http://localhost"]
elif os.environ["MODE"] == "RELEASE":
    DEBUG = False
    ALLOWED_HOSTS = [
        "release-proj-injection",
        "release-proj-nginx",
        "127.0.0.1",
        "localhost",
    ]
    CSRF_TRUSTED_ORIGINS = [
        "http://release-proj-injection",
        "http://release-proj-nginx",
        "http://127.0.0.1",
        "http://localhost",
        "https://release-proj-injection",
        "https://release-proj-nginx",
        "https://127.0.0.1",
        "https://localhost",
    ]
else:
    msg = f"""Invalid Environment Variable(MODE) : {os.environ["MODE"]}"""
    logger.error(msg)
    raise ImproperlyConfigured(msg)

STATIC_ROOT = BASE_DIR / "static"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# pid 생성 폴더(있으면 만들지 않음)
PID_FOLDER = BASE_DIR / "pids"
if not os.path.exists(PID_FOLDER):
    os.mkdir(PID_FOLDER)
# 서버의 pid 정보를 기록함.
with open(PID_FOLDER / "server.pid", "w") as f:
    pid = os.getpid()
    f.write(f"{pid}\n")
f.close()
